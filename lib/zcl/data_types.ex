defmodule ZCL.Datatypes do
  @type_ids %{
    nodata: 0x00,
    data8: 0x08,
    data16: 0x09,
    data24: 0x0A,
    data32: 0x0B,
    data40: 0x0C,
    data48: 0x0D,
    data56: 0x0E,
    data64: 0x0F,
    bool: 0x10,
    map8: 0x18,
    map16: 0x19,
    map24: 0x1A,
    map32: 0x1B,
    map40: 0x1C,
    map48: 0x1D,
    map56: 0x1E,
    map64: 0x1F,
    uint8: 0x20,
    uint16: 0x21,
    uint24: 0x22,
    uint32: 0x23,
    uint40: 0x24,
    uint48: 0x25,
    uint56: 0x26,
    uint64: 0x27,
    int8: 0x28,
    int16: 0x29,
    int24: 0x2A,
    int32: 0x2B,
    int40: 0x2C,
    int48: 0x2D,
    int56: 0x2E,
    int64: 0x2F,
    enum8: 0x30,
    enum16: 0x31,
    semi: 0x38,
    single: 0x39,
    double: 0x3A,
    octstr: 0x41,
    string: 0x42,
    octstr16: 0x43,
    string16: 0x44,
    array: 0x48,
    struct: 0x4C,
    set: 0x50,
    bag: 0x51,
    tod: 0xE0,
    date: 0xE1,
    utc: 0xE2,
    clusterID: 0xE8,
    attributeID: 0xE9,
    bacOID: 0xEA,
    eui64: 0xF0,
    key128: 0xF1,
    opaque: nil,
    unk: 0xFF
  }

  def id(type) do
    Map.fetch(@type_ids, type)
  end
end
